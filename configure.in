dnl Process this file with autoconf to produce a configure script.

AC_COPYRIGHT([
Copyright (C) 2001, 2002, 2003, 2004, 2005 Alvaro Lopez Ortega

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public
License as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
USA
])

dnl require autoconf 2.58
AC_PREREQ(2.58)

dnl Version
m4_define([cherokee_major_version], [0])
m4_define([cherokee_minor_version], [4])
m4_define([cherokee_micro_version], [18])
m4_define([cherokee_patch_version], [b59])
m4_define([cherokee_version], m4_format('%s.%s.%s%s', cherokee_major_version, cherokee_minor_version, cherokee_micro_version, cherokee_patch_version))

m4_define([cherokee_major_version_len], m4_len(cherokee_major_version))
m4_define([cherokee_minor_version_len], m4_len(cherokee_minor_version))
m4_define([cherokee_micro_version_len], m4_len(cherokee_micro_version))
m4_define([cherokee_patch_version_len], m4_len(cherokee_patch_version))
m4_define([cherokee_version_len], m4_eval(m4_len(cherokee_version) -2))

dnl Init autoconf and automake
AC_INIT([cherokee], [cherokee_version], [http://bugs.0x50.org], [cherokee])
AC_CONFIG_SRCDIR([cherokee/server.c])
AM_INIT_AUTOMAKE(no-define)

AC_CANONICAL_HOST
AC_DEFINE(PACKAGE_MAJOR_VERSION, "cherokee_major_version", [Version string])
AC_DEFINE(PACKAGE_MINOR_VERSION, "cherokee_minor_version", [Version string])
AC_DEFINE(PACKAGE_MICRO_VERSION, "cherokee_micro_version", [Version string])
AC_DEFINE(PACKAGE_PATCH_VERSION, "cherokee_patch_version", [Version string])

AC_DEFINE_UNQUOTED(PACKAGE_VERSION_LEN, cherokee_version_len, [Version string length])
AC_DEFINE_UNQUOTED(PACKAGE_MAJOR_VERSION_LEN, cherokee_major_version_len, [Version string length])
AC_DEFINE_UNQUOTED(PACKAGE_MINOR_VERSION_LEN, cherokee_minor_version_len, [Version string length])
AC_DEFINE_UNQUOTED(PACKAGE_MICRO_VERSION_LEN, cherokee_micro_version_len, [Version string length])
AC_DEFINE_UNQUOTED(PACKAGE_PATCH_VERSION_LEN, cherokee_patch_version_len, [Version string length])


dnl Check for CPU / vendor / OS
os_string="UNIX"
AC_MSG_CHECKING([host platform characteristics])
	case "$host" in
	*-*-mingw*|*-*-cygwin*)
	     os_string="WIN"
          ;;
	*-*-*netbsd*)
		thread_ldflags="-pthread"	
          ;;
	*-*-*freebsd*|*-*-*openbsd*)
		thread_ldflags="-pthread"
          ;;
	*-*-linux*)
		thread_ldflags="-lpthread"
          ;;
	*-*-hpux*)
		thread_ldflags="-lpthread"
          ;;
	*-*-solaris*)
	     AC_DEFINE(SOLARIS, 1, [It is Solaris])	     
		setenv_is_threadsafe="yes"
          ;;
	*-*-darwin*)
		thread_ldflags="-pthread"
          ;;
	*)
		AC_MSG_WARN([*** Please add $host to configure.in checks!])
          ;;
esac
AC_MSG_RESULT(ok)


AC_ARG_ENABLE(os_string, AC_HELP_STRING([--enable-os-string=STR], [Set a customized OS type string]), [os_string="$enableval"])
AC_DEFINE_UNQUOTED(OS_TYPE, "${os_string}", [OS type])


AM_INIT_AUTOMAKE(cherokee, $VERSION)
AM_MAINTAINER_MODE

AM_CONFIG_HEADER(config.h)
AC_SUBST(VERSION)

AC_PATH_PROG(cherokeepath, cherokee)

AC_PROG_CC
AC_PROG_INSTALL

AC_FUNC_CLOSEDIR_VOID
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_VPRINTF

AC_C_CONST
AC_C_BIGENDIAN
AC_C_INLINE
if test "$ac_cv_c_inline" != no; then
  AC_DEFINE(HAVE_INLINE, 1, [Compile supports inline])
fi


AC_PROG_YACC
AC_CHECK_PROG(HAVE_YACC, $YACC, yes, no)
if [[ "$HAVE_YACC" = "no" ]]; then
	AC_MSG_ERROR(yacc is required to build Cherokee - consider bison)
fi

AC_CHECK_PROGS(LEX, flex lex, no)
if [[ "$LEX" == "no" ]]; then
	AC_MSG_ERROR(lex is required to build Cherokee - consider flex)
fi
AM_PROG_LEX

dnl
dnl Check for headers
dnl
AC_HEADER_STDC
AC_HEADER_DIRENT
AC_HEADER_TIME
AC_HEADER_SYS_WAIT

AC_CHECK_HEADERS(endian.h machine/endian.h sys/endian.h sys/isa_defs.h sys/utsname.h sys/poll.h poll.h )
AC_CHECK_HEADERS(sys/socket.h netinet/in.h arpa/inet.h netinet/tcp.h sys/ioctl.h fcntl.h sys/time.h)
AC_CHECK_HEADERS(sys/resource.h resource.h unistd.h syslog.h stdint.h inttypes.h error.h pwd.h sys/uio.h)
AC_CHECK_HEADERS(pthread.h netdb.h stdarg.h sys/filio.h)

AC_SIZE_T
AC_TYPE_SIGNAL
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_TYPE_PID_T
AC_STRUCT_ST_RDEV
AC_CHECK_TYPE(ino_t,unsigned)
AC_CHECK_TYPE(loff_t,off_t)
AC_CHECK_TYPE(offset_t,loff_t)
AC_CHECK_TYPE(ssize_t, int)
AC_CHECK_TYPE(wchar_t, unsigned short)

AC_CHECK_SIZEOF(unsigned long)
AC_CHECK_SIZEOF(unsigned int)
AC_CHECK_SIZEOF(off_t)

AC_FUNC_MEMCMP
AC_FUNC_MMAP

AC_CHECK_FUNCS(gmtime gmtime_r getrlimit getdtablesize)


AH_BOTTOM([
/* Give us an unsigned 32-bit data type. */
#if SIZEOF_UNSIGNED_LONG==4
#define UWORD32 unsigned long
#elif SIZEOF_UNSIGNED_INT==4
#define UWORD32 unsigned int
#else
#error I do not know what to use for a UWORD32.
#endif
])

#sinclude(network.m4)
#sinclude(etr_socket_nsl.m4)
#sinclude(sendfile_samba.m4)

dnl
dnl Check for fd events inspect functions
dnl
AC_CHECK_FUNC(poll, have_poll=yes)
AC_CHECK_FUNC(select, have_select=yes)
AC_CHECK_FUNC(kqueue, have_kqueue=yes)

dnl
dnl Epoll
dnl
AC_CHECK_HEADER(sys/epoll.h, have_epoll_include=yes, have_epoll_include=no)

have_epoll=no
if test "x$have_epoll_include" = "xyes"; then
 	AC_MSG_CHECKING(for epoll system call)

     AC_TRY_RUN([
		#include <stdint.h>
		#include <sys/param.h>
		#include <sys/types.h>
		#include <sys/syscall.h>
		#include <sys/epoll.h>
		#include <unistd.h>

		int epoll_create (int size) {
	        return (syscall(__NR_epoll_create, size));
		}
	
		int main (int argc, char **argv) {
	        int epfd;
	        epfd = epoll_create(256);
	    	   exit (epfd == -1 ? 1 : 0);
		}
	], have_epoll=yes)
	AC_MSG_RESULT($have_epoll)
fi

dnl
dnl Solaris 10: Event ports
dnl
AC_ARG_ENABLE(ports, AC_HELP_STRING([--enable-ports],[Enable Solaris 10 Event Ports]))
if test "x$enable_ports" = "xyes"
then
	   AC_CHECK_HEADER(port.h, have_port_include=yes, have_port_include=no)

	   have_port=no
	   if test "x$have_port_include" = "xyes"; then
	    	AC_MSG_CHECKING(for event ports support)

		     AC_TRY_RUN([
		#include <stdint.h>
		#include <unistd.h>
		#include <port.h>
	
		int main (int argc, char **argv) {
	        int port;
		   port = port_create();
	    	   exit (port < 0 ? 1 : 0);
		}
			], have_port=yes)
			AC_MSG_RESULT($have_port)
		fi
fi

if test "$have_epoll" = yes; then
	AC_DEFINE(HAVE_EPOLL, 1, [Have epoll])
fi
AM_CONDITIONAL(COMPILE_EPOLL, test x"$have_epoll" = "xyes")

if test "$have_kqueue" = yes; then
	AC_DEFINE(HAVE_KQUEUE, 1, [Have kqueue])
fi
AM_CONDITIONAL(COMPILE_KQUEUE, test x"$have_kqueue" = "xyes")

if test "$have_port" = yes; then
	AC_DEFINE(HAVE_PORT, 1, [Have event ports])
fi
AM_CONDITIONAL(COMPILE_PORT, test x"$have_port" = "xyes")

if test "$have_poll" = yes; then
	AC_DEFINE(HAVE_POLL, 1, [Have poll])
fi
AM_CONDITIONAL(COMPILE_POLL, test x"$have_poll" = "xyes")

if test "$have_select" = yes; then
	AC_DEFINE(HAVE_SELECT, 1, [Have select])
fi
AM_CONDITIONAL(COMPILE_SELECT, test x"$have_select" = "xyes")


dnl
dnl Large file support +2/4Gb
dnl
AC_SYS_LARGEFILE

dnl
dnl Socket library
dnl
AC_SEARCH_LIBS(socket, socket)
AC_SEARCH_LIBS(accept, socket)
AC_SEARCH_LIBS(bind, socket)
AC_SEARCH_LIBS(listen, socket)
AC_SEARCH_LIBS(setsockopt, socket)

ETR_SOCKET_NSL

dnl
dnl Check for inet_pton.  We have our own, but on Solaris the version in
dnl libresolv is more lenient in ways that Solaris's internal DNS resolution
dnl code requires, so if we use our own *and* link with libresolv (which may
dnl be forced by Perl) DNS resolution fails.
dnl
AC_SEARCH_LIBS(inet_pton, [socket nsl resolv])
AC_CHECK_FUNCS(inet_pton inet_ntop)

AC_SEARCH_LIBS(gethostbyname, [socket nsl resolv])
AC_CHECK_FUNCS(gethostbyname gethostbyname_r)

dnl
dnl Check for inet_addr
dnl
AC_SEARCH_LIBS(inet_addr, xnet) 
AC_CHECK_FUNCS(inet_addr)

dnl
dnl TCP_CORK
dnl
HYDRA_TCP_CORK


dnl
dnl Check for GNU getopt_long()
dnl
#AC_SEARCH_LIBS(getopt_long, [iberty gnugetopt])
AC_CHECK_FUNC(getopt_long, have_getopt_long="yes")
AM_CONDITIONAL(HAVE_GETOPT_LONG, test x"$have_getopt_long" = "xyes")


dnl
dnl Pthread
dnl
with_pthread="yes"
AC_ARG_ENABLE(pthread, AC_HELP_STRING([--disable-pthread],[Disable threading support]),
		    with_pthread="$enableval", with_pthread="yes")

AM_CONDITIONAL(USE_PTHREAD, test "x$with_pthread" = "xyes")
if test "x$with_pthread" = "xyes"
then
	ACX_PTHREAD( , AC_MSG_ERROR([POSIX threads missing]))

	dnl I'm not sure about it..
	dnl but I've had problems compiling in some GNU/Linux machines
	dnl because ACX_PTHREAD didn't add -lpthread
	if test "x$PTHREAD_LIBS" =  "x"
	then
#	   AC_CHECK_LIB(pthread, pthread_create, 
#				 [PTHREAD_LIBS="-lpthread"
#				  AC_SUBST(PTHREAD_LIBS)])
		PTHREAD_LIBS="$thread_ldflags"
 		AC_SUBST(PTHREAD_LIBS)
	fi

	if test "$acx_pthread_ok" = "yes"; then

		AC_MSG_CHECKING([for pthread_rwlock_t support])
		have_pthread_rwlock_t=yes
		AC_TRY_COMPILE([#include <pthread.h>],
			[pthread_rwlock_t rwlock=PTHREAD_RWLOCK_INITIALIZER;],
			AC_MSG_RESULT([ok]),

		dnl Didn't find rwlock_t. 
		dnl Try defining _XOPEN_SOURCE=500
		dnl
		oldcflags="$CFLAGS"
		CFLAGS="$CFLAGS -D_XOPEN_SOURCE=500"

		AC_TRY_COMPILE([#include <pthread.h>], 
			[pthread_rwlock_t rwlock=PTHREAD_RWLOCK_INITIALIZER;]
		,
			AC_MSG_RESULT([-D_XOPEN_SOURCE=500])
			PTHREAD_CFLAGS="$PTHREAD_CFLAGS -D_XOPEN_SOURCE=500"
			AC_SUBST(PTHREAD_CFLAGS)
			# AC_DEFINE(_XOPEN_SOURCE, 500, [Define this if it is needed for pthread_rwlock_t support])
		,
			# AC_MSG_ERROR([pthread_rwlock_t support missing]))
		))

		if test "$have_pthread_rwlock_t" = yes; then
			AC_DEFINE(HAVE_PTHREAD_RWLOCK_T, 1, [Define if your pthread library includes pthread_rwlock_t])
		fi

		CFLAGS="$oldcflags"

		with_pthread="yes"
	fi
fi

dnl
dnl Is setenv() threadsafe?
dnl
if test "$setenv_is_threadsafe" = "yes"; then
AC_DEFINE(SETENV_IS_THREADSAFE, 1, [setenv() function is thread safe])],
fi

dnl
dnl Check for vsyslog
dnl
AC_CHECK_FUNCS(syslog vsyslog strsep strcasestr)

dnl
dnl Check if the global variable `timezone' exists. If so, define
dnl HAVE_INT_TIMEZONE.
dnl
AC_STRUCT_TIMEZONE

AC_MSG_CHECKING(for global timezone)
AC_TRY_LINK([#include <time.h>],
[int res; res = timezone / 60;],
[AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_INT_TIMEZONE,, [Set to 1 if you have the global variable timezone])],
AC_MSG_RESULT(no))


dnl
dnl Dynamic linker library
dnl
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL

AC_MSG_CHECKING([host platform characteristics])
case "$host" in
        *-*-mingw*|*-*-cygwin*)
			 so_suffix=DLL
                libdl=
                ;;
        *-*-*bsd*)
			 so_suffix=so
                libdl=
                ;;
        *-*-linux*)
			 so_suffix=so
                libdl="-ldl"
                ;;
        *-*-solaris*)
			 so_suffix=so
                libdl="-ldl"
                ;;
	   *-*-darwin*) 
			 so_suffix=dylib
                libdl="-ldl"	
			 ;;
        *)
                AC_MSG_WARN([*** Please add $host to configure.in checks!])
                libdl="-ldl"
                ;;
esac
LIBS="$LIBS $libdl"
AC_DEFINE_UNQUOTED(SO_SUFFIX, "${so_suffix}", [Dynamic loading libraries extension])


dnl
dnl Check for RTDL constants (from Haskell code)
dnl
dnl ** check for libdl & RTLD_NEXT
dnl ** sometimes RTLD_NEXT is hidden in #ifdefs we really don't wan to set
AC_MSG_CHECKING(for RTLD_NEXT from dlfcn.h)
AC_EGREP_CPP(yes,
[
 #include <dlfcn.h>
 #ifdef RTLD_NEXT
        yes
 #endif
], [
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_RTLDNEXT,,[Have RTDL_NEXT])
  HaveRtldNext=YES
], [
  AC_MSG_RESULT(no)
  HaveRtldNext=NO
  ])    
AC_SUBST(HaveRtldNext)

dnl ** RTLD_LOCAL isn't available on cygwin or openbsd
AC_MSG_CHECKING(for RTLD_LOCAL from dlfcn.h)
AC_EGREP_CPP(yes,
[
 #include <dlfcn.h>
 #ifdef RTLD_LOCAL
        yes
 #endif
], [
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_RTLDLOCAL,,[Have RTDL_LOCAL])
  HaveRtldLocal=YES
], [
  AC_MSG_RESULT(no)
  HaveRtldLocal=NO
  ])    
AC_SUBST(HaveRtldLocal)

dnl ** RTLD_GLOBAL isn't available on openbsd
AC_MSG_CHECKING(for RTLD_GLOBAL from dlfcn.h)
AC_EGREP_CPP(yes,
[
 #include <dlfcn.h>
 #ifdef RTLD_GLOBAL
        yes
 #endif
], [
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_RTLDGLOBAL,,[Have RTDL_GLOBAL])
  HaveRtldGlobal=YES
], [
  AC_MSG_RESULT(no)
  HaveRtldGlobal=NO
  ])    
AC_SUBST(HaveRtldGlobal)

dnl ** RTLD_NOW isn't available on openbsd
AC_MSG_CHECKING(for RTLD_NOW from dlfcn.h)
AC_EGREP_CPP(yes,
[
 #include <dlfcn.h>
 #ifdef RTLD_NOW
        yes
 #endif
], [
  AC_MSG_RESULT(yes)
  AC_DEFINE(HAVE_RTLDNOW,,[Have RTDL_NOW])
  HaveRtldNow=YES
], [
  AC_MSG_RESULT(no)
  HaveRtldNow=NO
  ])    
AC_SUBST(HaveRtldNow)


dnl
dnl GNOME-VFS handler
dnl
AC_ARG_ENABLE(gnomevfs, AC_HELP_STRING([--enable-gnomevfs],[compile the gnomevfs handler]))
if test "x$enable_gnomevfs" = "xyes"
then
	   AC_CHECK_PROG(PKGCONFIG, "pkg-config", yes, no)
	   if test "$PKGCONFIG" != "no"
	   then
	    AC_MSG_CHECKING(GNOMEVFS CFLAGS)
	    GNOMEVFS_CFLAGS=`pkg-config gnome-vfs-2.0 --cflags 2>/dev/null`
	    if test "x$GNOMEVFS_CFLAGS" != "x"; then
	    	    AC_MSG_RESULT(${GNOMEVFS_CFLAGS})
		    AC_SUBST(GNOMEVFS_CFLAGS)
	    else 	
	    	    AC_MSG_RESULT(no)
	    fi    

	    AC_MSG_CHECKING(GNOMEVFS LIBS)
	    GNOMEVFS_LIBS=`pkg-config gnome-vfs-2.0 --libs 2>/dev/null`
	    if test "x$GNOMEVFS_LIBS" != "x"; then
	    	    AC_MSG_RESULT(${GNOMEVFS_LIBS})
		    AC_SUBST(GNOMEVFS_LIBS)
	    else 	
	    	    AC_MSG_RESULT(no)
	    fi    
	   fi
fi
AM_CONDITIONAL(HAVE_GNOMEVFS, test "x$GNOMEVFS_LIBS" != "x")


dnl
dnl IPv6 Support
dnl I got this mostly from Apache's tests
dnl

AC_ARG_ENABLE(ipv6,
  AC_HELP_STRING([--disable-ipv6], [Disable IPv6 support]),
  [ if test "$enableval" = "no"; then
       disabled_ipv6=1
    fi ],
  [ disabled_ipv6=0 ] )

AC_SEARCH_LIBS(getaddrinfo, socket inet6)
AC_SEARCH_LIBS(getnameinfo, socket inet6)
AC_SEARCH_LIBS(gai_strerror, socket inet6)
AC_CHECK_FUNC(gai_strerror)

APR_CHECK_WORKING_GETADDRINFO
APR_CHECK_WORKING_GETNAMEINFO

AC_ACME_SOCKADDR_IN6
AC_ACME_SOCKADDR_STORAGE

AC_MSG_CHECKING(if the system supports IPv6)
have_ipv6="no"

if test "$disabled_ipv6" = 1; then
    AC_MSG_RESULT([no -- disabled by user])
else
    if test "x$ac_cv_acme_sockaddr_in6" = "xyes"; then
        if test "x$ac_cv_working_getaddrinfo" = "xyes"; then
            if test "x$ac_cv_working_getnameinfo" = "xyes"; then
                have_ipv6="yes"
                AC_MSG_RESULT([yes])
 		      AC_DEFINE(HAVE_IPV6, 1, [Define if you have IPv6 support.])
            else
                AC_MSG_RESULT([no -- no getnameinfo])
            fi
        else
            AC_MSG_RESULT([no -- no working getaddrinfo])
        fi
    else
        AC_MSG_RESULT([no -- no sockaddr_in6])
    fi
fi


dnl
dnl Check for pcre library
dnl
AC_CHECK_LIB(pcre, pcre_compile, have_pcre_lib=yes, have_pcre_lib=no)
AC_CHECK_HEADER(pcre.h, have_pcre_include=yes, have_pcre_include=no)
if test "$have_pcre_lib $have_pcre_include" = "yes yes"; then
   have_pcre="yes"
else
   have_pcre="no"
fi

AM_CONDITIONAL(HAVE_PCRE, test "$have_pcre" = "yes")
if test "$have_pcre" = "yes"; then
   AC_DEFINE(HAVE_PCRE, 1, [Have pcre library])
fi

dnl
dnl Check for FastCGI library
dnl
AC_CHECK_LIB(fcgi, FCGX_IsCGI, have_fcgi=yes, have_fcgi=no)
AM_CONDITIONAL(HAVE_FCGI, test "$have_fcgi" = "yes")

dnl
dnl PAM
dnl
AC_CHECK_LIB(pam, _pam_dispatch, have_pam=yes, have_pam=no)
AC_CHECK_HEADER(security/pam_modules.h, have_pam_include=yes, have_pam_include=no)
AC_CHECK_HEADERS(security/_pam_macros.h security/pam_appl.h)
AM_CONDITIONAL(HAVE_PAM, test "$have_pam $have_pam_include" = "yes yes")

dnl
dnl crypt() and crypt_r()
dnl
AC_CHECK_HEADERS(crypt.h, have_crypt_include=yes, have_crypt_include=no)

AC_CHECK_LIB(crypt, crypt, have_crypt_lib="yes")
AM_CONDITIONAL(HAVE_CRYPT, test "$have_crypt_lib $have_crypt_include" = "yes yes")
if test "$have_crypt_lib" = "yes"; then
	AC_DEFINE(HAVE_CRYPT, 1, [Have crypt function])
fi

AC_CHECK_LIB(crypt, crypt_r, have_crypt_r_lib="yes")
AM_CONDITIONAL(HAVE_CRYPT_R, test "$have_crypt_r_lib $have_crypt_include" = "yes yes")
if test "$have_crypt_r_lib" = "yes"; then
	AC_DEFINE(HAVE_CRYPT_R, 1, [Have crypt_r function])
fi

if test "x$have_crypt_lib" = "xyes"; then
	CRYPT_LIBS="-lcrypt"
	AC_SUBST(CRYPT_LIBS)
fi

dnl
dnl crypt_r and pthread 
dnl
if test "$have_crypt_r_lib" = "yes"; then
	dnl
	dnl struct crypt_data
	dnl
	oldcflags="$CFLAGS"
	CFLAGS="$CFLAGS -D_GNU_SOURCE"

	AC_MSG_CHECKING([for struct crypt_data])
	AC_TRY_COMPILE([#include <crypt.h>], 
				[struct crypt_data data;]
			    ,
				AC_MSG_RESULT([-D_GNU_SOURCE])
				CRYPT_CFLAGS="-D_GNU_SOURCE"
				AC_SUBST(CRYPT_CFLAGS)
			    ,
				AC_MSG_ERROR([struct crypt_data is not known]))

	CFLAGS="$oldcflags"
fi


dnl
dnl SSL and TLS
dnl
AC_ARG_ENABLE([tls], 
[AC_HELP_STRING([--disable-tls],[Disable TLS/SSL support])
AC_HELP_STRING([--enable-tls=[gnutls|openssl]])],
		    enable_tls="$enableval", enable_tls="undef")

case "$enable_tls" in
	no)
		check_gnutls=no
		check_openssl=no
		;;
	undef|yes)
		check_gnutls=yes
		check_openssl=yes
		;;
	gnu*)
		check_gnutls=yes
		check_openssl=no
		;;
	open*)
		check_gnutls=no
		check_openssl=yes
		;;	
	*)
		AC_MSG_ERROR([Incorrect TLS library])
		;;
esac

have_tls="no"

if test "$check_gnutls" = "yes"  && test "$have_tls" = "no"
then
		dnl
		dnl GNUTLS
		dnl
		AM_PATH_LIBGNUTLS(1.0.4, [have_gnutls=yes], [have_gnutls=no])
		if test "$have_gnutls" = "yes"
		then
		        TLS_LIBS="$LIBGNUTLS_LIBS"
		        TLS_CFLAGS="$LIBGNUTLS_CFLAGS"
			   AC_SUBST(TLS_LIBS)
			   AC_SUBST(TLS_CFLAGS)

			   AC_DEFINE(HAVE_TLS, 1, [Have TLS support])
			   AC_DEFINE(HAVE_GNUTLS, 1, [Have libgnutls])
			   have_tls="gnutls"
		else
			   enable_tls=no
			   AC_MSG_WARN([[
		   ***
		   *** libgnutls was not found. You may want to get it from
		   *** ftp://ftp.gnutls.org/pub/gnutls/
		   ***]])
		fi
fi

if test "$check_openssl" = "yes" && test "$have_tls" = "no"
then
		dnl
		dnl OpenSSL
		dnl
		AC_CHECK_LIB(ssl, SSL_accept, [have_openssl=yes], [have_openssl=no])
		if test "$have_openssl" = "yes"
		then
			TLS_LIBS="-lssl"
			AC_SUBST(TLS_LIBS)

			AC_DEFINE(HAVE_TLS, 1, [Have TLS support])
			AC_DEFINE(HAVE_OPENSSL, 1, [Have OpenSSL library])
			have_tls="openssl"
		else
			enable_tls=no
			AC_MSG_WARN([[
		   ***
		   *** OpenSSL was not found. You may want to get it from
		   *** http://www.openssl.org
		   ***]])
		fi
fi


dnl
dnl ClamAV
dnl
#have_clamav=no
#AC_PATH_PROG(LIBCLAMAV_CONFIG, clamav-config, no)
#AM_CONDITIONAL(HAVE_CLAMAV, test "$LIBCLAMAV_CONFIG" != "no")
#if test "$LIBCLAMAV_CONFIG" != "no"; then
#   have_clamav=yes
#   AC_DEFINE(HAVE_CLAMAV, 1, [Have ClamAV support])
#
#   AC_MSG_CHECKING([for clamav cflags])
#   LIBCLAMAV_CFLAGS=`$LIBCLAMAV_CONFIG --cflags`
#   AC_SUBST(LIBCLAMAV_CFLAGS)
#   AC_MSG_RESULT($LIBCLAMAV_CFLAGS)
#
#   AC_MSG_CHECKING([for clamav libs])
#   LIBCLAMAV_LIBS=`$LIBCLAMAV_CONFIG --libs`
#   AC_SUBST(LIBCLAMAV_LIBS)
#   AC_MSG_RESULT($LIBCLAMAV_LIBS)
#fi


dnl
dnl Options
dnl
AC_MSG_CHECKING([fresh module configuration from '${srcdir}'])
	rm -f ${srcdir}/cherokee/loader.autoconf.h ${srcdir}/cherokee/loader.autoconf.inc 2>/dev/null
	touch ${srcdir}/cherokee/loader.autoconf.h ${srcdir}/cherokee/loader.autoconf.inc
AC_MSG_RESULT([ok])

use_static_module=""
AC_ARG_ENABLE(static-module,
	   AC_HELP_STRING([--enable-static-module=MODULE][]),
	   [use_static_module="$use_static_module $enableval "],[])

modules="error_redir server_info file dirlist redir common nn cgi phpcgi remote_control gzip ncsa combined w3c pam htpasswd plain"

# Remove modules that will not be compiles
#
if test "x$have_pam" != "xyes"; then
	modules=`echo $modules | sed s/pam//`
fi
if test "$have_crypt $have_crypt_include" != "yes yes"; then
	modules=`echo $modules | sed s/htpasswd//`
fi

for mod in $modules; do
	AC_MSG_CHECKING([module "$mod"])

	if echo $use_static_module | grep $mod >/dev/null || echo $use_static_module | grep all >/dev/null; then
		 cd cherokee
		 echo "extern cherokee_module_info_t cherokee_${mod}_info;" >> ${srcdir}/loader.autoconf.h
		 echo "cherokee_table_add (loader->table, \"$mod\", &cherokee_${mod}_info);" >> ${srcdir}/loader.autoconf.inc
		 cd ..

	      AC_MSG_RESULT([static])
	else
	      AC_MSG_RESULT([dynamic])
	fi
done


dnl
dnl Static/Dynamic modules
dnl
conf_h="${srcdir}/cherokee/loader.autoconf.h"
AM_CONDITIONAL(STATIC_HANDLER_SERVER_INFO,    grep server_info    $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_HANDLER_FILE,           grep file           $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_HANDLER_DIRLIST,        grep dirlist        $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_HANDLER_REDIR,          grep redir          $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_HANDLER_ERROR_REDIR,    grep redir          $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_HANDLER_COMMON,         grep common         $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_HANDLER_NN,             grep nn             $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_HANDLER_CGI,            grep cgi            $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_HANDLER_PHPCGI,         grep phpcgi         $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_HANDLER_REMOTE_CONTROL, grep remote_control $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_ENCODER_GZIP,           grep gzip           $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_LOGGER_NCSA,            grep ncsa           $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_LOGGER_COMBINED,        grep combined       $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_LOGGER_W3C,             grep w3c            $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_VALIDATOR_PAM,          grep pam            $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_VALIDATOR_HTPASSWD,     grep htpasswd       $conf_h >/dev/null)
AM_CONDITIONAL(STATIC_VALIDATOR_PLAIN,        grep plain          $conf_h >/dev/null)

AC_OUTPUT(Makefile cherokee/Makefile cget/Makefile icons/Makefile doc/Makefile doc/es/Makefile contrib/Makefile debian/Makefile qa/Makefile cherokee-config cherokee.spec cherokee.pc)


methods=""
if test "$have_epoll"  = yes; then methods="${methods}epoll ";  fi
if test "$have_kqueue" = yes; then methods="${methods}kqueue "; fi
if test "$have_port"   = yes; then methods="${methods}port ";   fi
if test "$have_poll"   = yes; then methods="${methods}poll ";   fi
if test "$have_select" = yes; then methods="${methods}select";  fi

crypt_type="no"
if test "$have_crypt_lib" = "yes" && test "$have_crypt_r_lib" = "yes"; then
	crypt_type="multithread"
elif test "$have_crypt_lib" = "yes"; then
	crypt_type="single thread"
fi

echo
echo ============================
echo "Install prefix        $prefix"
echo "cflags                $CFLAGS"
echo "sendfile()            $with_sendfile_support"
echo "IPv6 support          $have_ipv6"
i=1
for m in $methods; do
	echo "Polling method $i      $m"
	i=`expr $i + 1`
done
echo "Threading support     $with_pthread"
echo "PCRE library          $have_pcre"
echo "Compatible PAM        $have_pam"
echo "TLS support           $have_tls"
echo "crypt support         $crypt_type"
echo
eval eval echo  "Installation dir      $bindir"
echo ============================
echo
if test "x$cherokeepath" != "x" ; then
	echo Warning: You have an old copy of Cherokee at $cherokeepath.
	echo	
fi

cat <<THEEND
+--------------------------------------------------------------------+
| License:                                                           |
| This software is subject to the GPL License, available in this     |
| distribution in the file COPYING.  By continuing this installation |
| process, you are bound by the terms of this license agreement.     |
| If you do not agree with the terms of this license, you must abort |
| the installation process at this point.                            |
+--------------------------------------------------------------------+

Thank you for using Cherokee.
THEEND
